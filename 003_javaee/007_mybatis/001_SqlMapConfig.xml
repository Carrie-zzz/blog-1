	<?xml version="1.0" encoding="UTF-8" ?>
	<!DOCTYPE configuration
	  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-config.dtd">
	<configuration>
		<!-- 特性 ，读取配置文件 ：value=${key}  egvalue=:${jdbc.driver}  -->
		<properties resource="jdbc.properties" />

		<!-- 全局配置参数 :开启二级缓存 ，开启延迟载 ,指定默认的 executor-->
		<settings ></settings>

		<!-- 定义别名 -->
		<typeAliases>
			<!-- 单个设置 -->
			<!-- <typeAlias type="com.huaxin.bean.HxUser" alias="hxUser" /> -->
			<!-- <typeAlias type="com.huaxin.bean.Tt" alias="tt" /> -->
			<!-- 别名整个包定义 ，Student 首字母大小写都可以-->
			<package name="com.huaxin.bean"/>		
		</typeAliases>
	
	
		<!-- 类型处理器用于java类型和jdbc类型映射 -->
		<typeHandlers ></typeHandlers>
		<!-- 对象封装  查询 返回时候 -->
		<objectFacctory type="com.xx.AObjectFactory" />

		<!-- 和spring整合后 environments配置将废除 -->
		<environments default="development">
			<environment id="development">
				<!-- 使用jdbc事务管理 -->
				<transactionManager type="JDBC" />
				<!-- 数据库连接池 -->
				<dataSource type="POOLED">
					<property name="driver" value="${jdbc.driver}" />
					<property name="url" value="${jdbc.url}" />
					<property name="username" value="${jdbc.username}" />
					<property name="password" value="${jdbc.password}" />
				</dataSource>
			</environment>
		</environments>
	
		<!-- 配置mapper映射文件 -->
		<mappers>
			<!-- 加载单个映射文件 ： 原始dao使用 -->
			 <mapper resource="HxUserMapper.xml" />
			 <mapper resource="TtMapper.xml" /> 

			<!-- <mapper resource="com/huaxin/mapper/HxUserMapper.xml"/> -->
			<!-- 完整路径 -->
			<!-- <mapper url="file:///D:\workspace\mybatis1\config\sqlmap\User.xml" /> -->

			<!-- 此种方法要求mapper接口名称和mapper映射文件**名称相同**，且放在**同一个目录**中 ,还有namespace -->
			<!-- <mapper class="com.huaxin.mapper.HxUserMapper" /> -->

			<!--批量mapper扫描 遵循规则：将mapper.xml和mapper.java文件放在一个目录 且文件名相同 -->
			<!-- <package name="com.huaxin"/> -->

			<!-- 文件不一定要放在同一个包下，放在一起的目的是为了Mybatis进行自动扫描 ,但是名字要相同-->
		</mappers>
	
	</configuration>




# 缓存 #
## 一级缓存 Hashmap存储 ##
	开启：默认开启
	范围：sqlSession()
	在同一个SqlSession中，两次执行相同的sql查询，第二次不再从数据库查询
	清除：SqlSession.commit()
	如果第一次查询后，执行commit提交，mybatis会清除缓存，第二次查询从数据库查询
	SqlSession.close()
## 二级缓存 ##
**开启：**

		* 在核心配置文件SqlMapConfig.xml中加入，表示打开二级缓存开关
			* <setting name="cacheEnabled" value="true"/>
			* statement启用二级缓存，设置useCache=true（默认值为true）
		* 由于mybaits的二级缓存是mapper范围级别，所以除了在SqlMapConfig.xml设置二级缓存的总开关外，还要在具体的mapper.xml中开启二级缓存。设置如下
			* <cache></cache>
			* <cache readOnly="false" size="500" flushInterval="120000" eviction="LRU"></cache>
				readOnly为true则所有相同的SQL语句返回同一个对象，有助于提高性能，但并发操作同一数据时可能不安全，如果设置为false则相同sql访问的是cache的clone副本。
				size缓存多少个对象，默认值1024。
				flushInterval缓存过期时间，单位是毫秒（1s=1000ms），默认为空，只要容量够则永不过期。
				eviction是缓存的淘汰算法，可选值有"LRU"、"FIFO"、"SOFT"、"WEAK"，缺省值是LRU
				　　LRU最近最少使用，移除最长时间不被使用的对象。
				　　FIFO先进先出。
				　　SOFT软引用，基于垃圾回收器状态和软引用规则来移除对象。
				　　WEAK弱引用，基于垃圾回收器状态和弱引用规则
		* 还需要将要缓存的pojo实现Serializable接口	
			* 因为二级缓存数据存储介质多种多样，不一定只存在内存中，有可能存在硬盘中，如果我们要再取这个缓存的话，就需要反序列化了
		* <select id="getRowCount" resultType="int" useCache="true">
**范围：mapper的namespace**
		相同的namespace使用一个二级缓存结构
		清除：
		执行statement需要清除，在statement中设置flushCache="true" （默认值 是true,如果false  update都不会更新到新数据）
		要求：
		pojo 实现Serializable接口
		可以控制长时间不刷新（统计），也可以控制每次都刷新数据（股票）
	
#  TypeHandler 类型转换器 #
1. java  数据库 类型转换
2. 处理器
	1. resultSetHandler
	2. paramterHandler
3. 自定义  
	1. 实现 TypeHandler接口
	2. 在核心配置文件中,配置
		1. typeHandlers dtd约束,有**位置顺序** 约束
		<typeHandlers> <typeHandler  handler="自定义类全路径com.xx.AHandler" javaType="" jdbcType=""/> 

# objectFactory  对象工厂 #
1. 自定义,类型封装
	1. 继承 DefaultObjectFactory
	2. 编写 create 方法
	3. 在核心配置文件中,配置
		<objectFacctory type="com.xx.AObjectFactory" />

# plugins 拦截器 #
1. 基于动态代理  切入点表达式 通知方法
2. 步骤
	1. 类上 @Intercepts
		1. { @Signature(method"",type="",args={...})  }
	2. 实现 ibatis.Interceptor 
	3. 实现抽象方法
	4.  配置核心文件
		<plugins> <plugin interceptor="com.xx.Inter" >
3. 自定义拦截器,只能拦截4种接口
	1. Executor.class
	2. StatementHandler.clas	生成 preparedStatement
	3. ParameterHandler.class	参数 映射 到 preparedStatement
	4. ResultSetHandler.class		结果集
4. 方法 
	1. setProperties
		1. 用于在Mybatis配置文件中指定一些属性的
	2. plugin
		1. 拦截器用于封装目标对象的，通过该方法我们可以
			1. 是否要进行拦截进
		2. 返回目标对象本身
		3. 也可以返回一个它的代理
			1. 可以对其中的方法进行拦截来调用intercept方法
	3. intercept
5. 注解
	1. @Intercepts用于表明当前的对象是一个Interceptor
	2. @Signature则表明要拦截的接口、方法以及对应的参数类型
		1. method 方法名
		2. type		接口(4种接口)
		3. args		方法参数