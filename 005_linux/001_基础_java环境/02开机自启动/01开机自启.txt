1. 修改文件
	* 创建开启启动文件
		/etc/init.d ->  /etc/rc.d/init.d
		vi /etc/init.d/nginx	-> vi /etc/rc.d/init.d/nginx
	* 内容(nginx为例)
		路径一定要改成自己的!!!
		PATH=/opt/ng/nginx
		NAME=nginx
		DAEMON=$PATH/sbin/$NAME
		CONFIGFILE=/opt/ng/conf/$NAME.conf
		PIDFILE=/opt/ng/conf/logs/$NAME.pid
	* 设置执行权限
		chmod a+x /etc/init.d/nginx
	* 注册成服务
		chkconfig --add nginx
	* 设置开机启动
		chkconfig nginx on
	* 重启, 查看nginx服务是否自动启动
		shutdown -h 0 -r
		ss -apn|grep nginx
	* 之后路使用 systemctl操作了~~
	


2. 配置 systemctl服务
	* 在 /usr/lib/systemd/system/  下添加服务文件 *.service
		service:文件扩展名为.service,用于定义系统服务
		target:文件扩展名为.target，用于模拟实现运行级别
		device:用于定义内核识别的设备
		mount:定义文件系统挂载点
		socket:用于标识进程间通信用的socket文件，也可在系统启动时，延迟启动服务，实现按需启动
		snapshot:管理系统快照
		swap:用于标识swap设备
		automount:文件系统的自动挂载点
		path:用于定义文件系统中的一个文件或目录使用,常用于当文件系统变化时，延迟激活服务
	
	* 内容(nginx为例)路径一定要改成自己的!!!
		vi /usr/lib/systemd/system/nginx.service 
	
[Unit] 	
Description=nginx - high performance web server 
After=network.target remote-fs.target nss-lookup.target

[Service] 
Type=forking 
Environment="JAVA_HOME=/opt/jdk/jdk1.7.0_79"
PIDFile=/var/run/nginx.pid 
ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf 
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 
ExecReload=/usr/local/nginx/sbin/nginx -s reload 
ExecStop=/usr/local/nginx/sbin/nginx -s stop 
ExecQuit=/usr/local/nginx/sbin/nginx -s quit 
PrivateTmp=true

[Install] 
WantedBy=multi-user.target

--------------------
https://blog.csdn.net/u011314255/article/details/80314003
[Unit]:服务的说明
Description:描述服务,随便写
After:定义unit的启动次序，表示当前unit应该晚于哪些unit启动，其功能与Before相反
Requires：依赖到的其它units，强依赖，被依赖的units无法激活时，当前unit也无法激活
Wants：依赖到的其它units，弱依赖

[Service]服务运行参数的设置
Type=forking 是后台启动类型
	* simple：默认值，这个daemon主要由ExecStart接的指令串来启动，启动后常驻于内存中
	* forking  启动中使用fork()系统调用,建议同时设置 PIDFile=
	* notify
Environment=环境变量
PIDFile=pid路径(要求绝对路径)
ExecStart为服务的具体运行命令 (要求绝对路径)
ExecReload为重启命令(要求绝对路径)
ExecStop为停止命令(要求绝对路径)
PrivateTmp=True表示给服务分配独立的临时空间

[Install]服务安装的相关设置，可设置为多用户
		
	* 指令(.service可以省略不写)
		systemctl daemon-reload  重新加载

		systemctl enable *.service #开机运行服务
		systemctl disable *.service #取消开机运行

		systemctl start *.service #启动服务
		systemctl stop *.service #停止服务
		systemctl restart *.service #重启服务
		systemctl reload *.service #重新加载服务配置文件
		systemctl status *.service #查询服务运行状态
			* active(running) ## 运行
			* failed	##系统配置错误
			* inactive(dead)##关闭
		systemctl list-unit-files -t service -a	# 查询所有服务是否开机启动
		systemctl is-enabled servicename.service #查询单个服务是否开机启动

		systemctl --failed #显示启动失败的服务
		systemctl list-units --type=service #查看所有已启动的服务



systemctl start
systemctl stop
systemctl status

systemctl enable 
systemctl is-enabled  




