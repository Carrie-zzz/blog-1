1. 移除重复代码,剔除重复代码


2. 将注释转换为代码(删除一些注解)
	这样造成的结果就是,没有人愿意去好好的组织代码,让代码清楚起来,因为他们觉得加上注释就好了. 
	之后,代码更新了,可是程序员却常常 忘了去更新注释(我 们不得不承认,这种情况经常发生,这点,再好的软件工 程,都会有这种问题的存在
	过了一段时间,这些过时的注释不仅不能让代码更容易懂,反而会误导了读代码的人. 
	到了最后,我们剩下的东西就是:本身就不清晰的代码,混上一些不正确的注释
	包含太多注释的代码 ,绝对不是高质量 的代码

3. 异味代码导致不稳定性(建立子类解决)(开闭原则)

	1. 代码用到类别代码(type code)
		每添加一个类别代码就需要改动...
			class Shape {final int TYPELINE = 0;final int TYPERECTANGLE = 1;final int TYPECIRCLE = 2; int shapeType;   ... } 
	2. 代码中一个类很多字段某种状态使用不到(为了兼容不同的类型,很多字段是不用的)
	3. 一个类中一个变量,不同的情况下(type),它们有不同的含义
	4. switch 表达式经常是跟类别代码 表达式经常是跟类别代码((type code))同时出现的.


	1.用基于同一父类的不同子类来代替不同的类别(画图板)  (将抽象类变成接口)
	    平级关系,分开()
		检测是否过热,检测是否熟
                      
	2.用一个类的不同对象来代替不同的类别()
		当不同的类别具有比较多不同的行为,属性时，用第一种方法。
		当这些类别的行为,属性非常相似，或者只是差别在一 些 值上面的时候，用第二个方法

	开闭原则:如果我们需要增加新的功能,我们只需要增加新的代码,而不是改变原有的.移除 switch 和类别代码是达到开闭原则的普遍方法

4. 保持代码简洁,类修整(单一职责)
	如果觉得一个类太长,太复杂
	单一职责:每个类都应该只为一个理由而修改。当一个类包含许多其他的功能时，很明显违反了单一职责原则	

5. 慎用继承(里斯科夫替换原则(LSP))
	 当我们想要让一个类继承自另一个类时，我们一定要再三的检查：子类会不会继承了一些它不需要的功能（属性或者方法）？如果是的话，我们就得认真再想想：它们之间有没有真正的继承关系(关联)？
		如果没有的话，就用代理。
		如果有的话，将这些不用的功能从基类转移到另外一个合适的地方去(具体生成下一个父类)。
	如果一个父类描述的东西不是所有的子类共有的 ， 那这个父类的设计肯定不是一个好的设计.

	里斯科夫替换原则(LSP):子类应该能够代替父类的功能。或者直接点说，我们应该做到，将所有使用父类的地方改成使用子类后，对结果一点影响都没有。或者更
直白一点吧，请尽量不要用重载，重载是个很坏很坏的主意！

6.处理不合适的依赖(关联),重用提高(依赖反转原则:抽象不依赖具体)
	互相依赖,让代码很难被重用.(这个类能在别的系统重用吗?)

	1.看代码 看代码:有没有互相依赖 ？ ？
	2.认真想想 认真想想:它真正需要的是什么 ？ ？
	3.推测一下 推测一下:它在以后的系统中可以重用吗 ？ ？
	4.到要重用的时候就知道了 到要重用的时候就知道了 ： 现在我要重用这个类 ， 

	依赖反转原则(Dependency Inversion Principle):抽象不应该依赖于具体，高层的比较抽象的类不应该依赖于低层的比较具体的类。当这种问题出现的时候，我们应该抽取出更抽象的一个概念，然后让这两个类依赖于这个抽取出来的概念



7.ui与逻辑分层
	域逻辑(Domain logic)  ==  业务逻辑层   ( “Domain logicis also called "domain model" or "business logic)


8.用户例事(user story)
	“用户案例(user case)”或者“用户例事(user story)”
	用户例事只是描述系统的外在行为,千万不要提及任何有关数据库，记录，字段之类的对客户一点意义都没有的东西
		1. 用户做 XX。
		2. 系统做 YY。
		3. 用户做 ZZ。
		4. 系统做 TT。
	发布计划编制: 筛选在本次发布的用户例事的过程

	添加人员
		团队人数加倍并不等于开发周期的减半。它可能只会缩短 1/3。如果团队超过 10 个人的话，增加更多的人员可能反而会延缓项目的进度。
		而且项目开发周期越长，团队内的成员对整个项目代码的熟悉度就越少，加上不确定的人员流动，新来人员的业务不熟等其他可能性，这项目会越来越复杂。
		总的意思就是，项目人数不能太多，周期不能太长。

9.crc卡协助设计(快速的组织设计,理清设计的思路)

10.验收测试(Acceptance Test)/
	功能测试
	自动验收测试
	
	建立测试复用的测试用例

11. 对UI进行验收测试(验收测试属于客户)

12. 单元测试
	验收测试测试的是系统的外部行为，而单元测试是测试系统内部结构，它只测一个单元（类，甚至一个方法）

13. 测试驱动编程


14. 结对编程
	 如果我们不懂对方在说什么,最好的办法就是让他举一个例子.这是 沟通(也是 结 对 编程)中最重要的方法

	 在结对编程里面,一起设计是主要活动.除了一起设计以外,一起测试,一起查错也是结对编程的另一个主要活动
		一起设计
		一起写代码
		一起测试
		一起查错

	 00的设计和重构能



 


